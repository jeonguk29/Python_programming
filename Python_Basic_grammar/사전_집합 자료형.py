print()
print()


# 사전 자료형
data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'

print(data)

if '사과' in data:
    print("'사과'를 키로 가지는 데이터가 존재합니다. ")


# 다른 언어에서는 이런 사전자료형을 해쉬테이블이라고 부르곤함

# 사전자료형 초기화할때 dict() 함수 사용해 초기화 가능함  [ ] 안에 키를 넣어주고 = 값넣어주기

# 이처험 사전자료형은 특정한 키가 존재하는지 검사하기 위해서 상수 시간이 소요되기 때문에 문자열과 같은 키를 이용해서 어떠한 데이터를 저장하고 관리하고자 하는

# 상황에서는 일반적으로 리스트 보다 훨씬 효율적으로 데이터에 조회를 훨씬 빠르게

# 수행할수 있음


# 사전 자료형 관련 함수
data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'

# 키 데이터만 담은 리스트
key_list = data.keys()
# 값 데이터만 담은 리스트
value_list = data.values()
print(key_list)
print(value_list)

# 각 키에 따른 값을 하나씩 출력
for key in key_list:
    print(data[key])

# 사전 자료형 초기화 하는 2가지 방법
a = dict()

a['홍길동'] = 97

a['이순신'] = 98

print(a)

b = {

    '홍길동': 97,

    '이순신': 98

}

print(b)

print(b['이순신'])  # 이런식으러 특정 키에 값을 출력하게도 가능함

# b.keys() 로만 하면  사전 키라는 하나의 객체로 반환되서 dict_keys(['홍길동', '이순신'])   이것을 실제로
key_list = list(b.keys())

# 리스트 라는 데이터로  형변환을 해줘야 리스트 형으로 나옴
print(key_list)


# 집합 자료형   사전 자료형과 똑같이 데이터 및 조회 수정에 있어서 상수시간을 가짐
# 집합 자료형 초기화 방법 1
data = set([1, 1, 2, 3, 4, 4, 5])
print(data)
# 집합 자료형 초기화 방법 2
data = {1, 1, 2, 3, 4, 4, 5}
print(data)


# 집합 자료형의 연산
a = set([1, 2, 3, 4, 5])
b = set([3, 4, 5, 6, 7])
# 합집합
print(a | b)
# 교집합
print(a & b)
# 차집합
print(a - b)


# 집합 자료형 관련 함수
data = set([1, 2, 3])
print(data)
# 새로운 원소 추가
data. add(4)
print(data)
# 새로운 원소 여러 개 추가
data.update([5, 6])
print(data)


"""
사전 자료형과 집합 자료형의 특징
리스트나 튜플은 순서가 있기 때문에 인덱싱을 통해 자료형의 값을 얻을 수 있습니다.
사전 자료형과 집합 자료형은 순서가 없기 때문에 인덱싱으로 값을 얻을 수 없습니다.
사전의 키(Key) 혹은 집합의 원소(Element)를 이용해 0(1)의 시간 복잡도로 조회합니다.
자료형

사전자료형의 키 나 원소의 값으로는 변경 불가능한 문자열이나 튜플과 같은 객체가
사용되야한다는 점 기억하기 
"""
